?program: [(statement)+]

// statement
?statement: expr
      | function
      | assignment
      | return_state
      | condition
function: "def" new_symbol "(" [parameter ("," parameter)*] ")" "{" program "}"
assignment: new_symbol "=" expr
return_state: "return" expr
condition: "if" bool_expr ":" program "endif"
        |  "if" bool_expr ":" program "else" ":" program "endif"

?bool_expr: expr
    | eq
    | ne
    | lt
    | le
    | gt
    | ge
eq: expr "==" expr
ne: expr "!=" ne
lt: expr "<" expr
le: expr "<=" expr
gt: expr ">" expr
ge: expr ">=" expr

// expression
?expr: term
     | addition
     | substraction
     | function_call
addition: expr "+" term
substraction: expr "-" term
function_call: symbol "(" [expr ("," expr)*] ")"

?term: fact
     | multiplication
     | division
multiplication: term "*" fact
division: term "/" fact

?fact: number
     | symbol
     | priority

?priority: "(" expr ")"

symbol: CNAME
number: SIGNED_NUMBER

new_symbol: CNAME
parameter: CNAME

%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
